Okay, so we have a working camera. Hooray! The problem is that something about it just doesn't feel right. It could be better. Because the camera is always tracking the player, it means that you can get a little seasick from all the moving around you're going to do in the game. What we're going to do to address that is add a dead zone to the camera.

A dead zone is an area in the center of the screen where the camera does not actually track the player. The following diagram shows the map as a whole, the camera view embedded inside it, and the dead zone within the camera view.

[diagram]

When the player moves around inside the dead zone, the camera doesn't move. When the player moves past the edge of the dead zone, the camera moves along with the player. This means that small movements within the center of the screen (the main area of action) don't cause the screen to move. It feels nicer, at least to me.

We'll create a new camera function, modeling it on the centerCamera() function where we pass it the player object and the information about the width of the overall map. This will go at the bottom of our code, right before the </script> tag.

function followCamera(obj,viewdata) {
}

The math for a dead zone is simple but takes a minute to wrap your head around. The first step is to define xbuf and ybuf, which define the buffer area around our dead zone, which you can see in the diagram. We also need to know where the camera's current x and y positions are. We define that inside the function like this:

  xbuf = 96;
  ybuf = 96;
  xcam = gbox.getCamera().x;
  ycam = gbox.getCamera().y;

Since the only time we move the camera is when the player is outside the dead zone, we need to write some code that detects when that happens.

[diagram 2]

Let's start with the player moving to the right. As you can hopefully see from the diagram above, the player is to the right of the dead zone when (obj.x - xcam), which is the distance from the left side of the screen to the player object, is greater than (gbox._screenw - xbuf), which is the distance from the left side of the screen to the rightmost edge of the dead zone. If the former is greater than the latter, then we want to move the camera to the right by exactly the amount of the difference, which will cause the player sprite to remain on the rightmost edge of the dead zone. Our code looks like this, evaulating whether we're to the right of the dead zone and then adding that amount to the xcam variable and setting the camera to that number:

  if ((obj.x - xcam) > (gbox._screenw - xbuf)) gbox.setCameraX( xcam + (obj.x - xcam)-(gbox._screenw - xbuf),viewdata);

Similarly, we want to know when the distance between the player object and the left side of the screen (obj.x-xcam) is less than the distance between the left side of the screen and the beginning of the dead zone (xbuf). As above, we calculate the difference but this time it's a negative number, which ends up subtracting from xcam and moving our camera to the left.

if ((obj.x - xcam) < (xbuf)) gbox.setCameraX(xcam + (obj.x - xcam) - (xbuf),viewdata);

Lucky for us, we can just replace "x" with "y" and "w" with "h" and get the code for the y axis since it's the same math with different variables.

  if ((obj.y - ycam) > (gbox._screenh - ybuf)) gbox.setCameraY( ycam + (obj.y - ycam)-(gbox._screenh - ybuf),viewdata);
  if ((obj.y - ycam) < (ybuf)) gbox.setCameraY(ycam + (obj.y - ycam) - (ybuf),viewdata);  

And that's it. The completed followCamera() code should look like this:

function followCamera(obj,viewdata) {
  xbuf = 96;
  ybuf = 96;
  xcam = gbox.getCamera().x;
  ycam = gbox.getCamera().y;

  // if the object we're following is 
  if ((obj.x - xcam) > (gbox._screenw - xbuf)) gbox.setCameraX( xcam + (obj.x - xcam)-(gbox._screenw - xbuf),viewdata);
  if ((obj.x - xcam) < (xbuf)) gbox.setCameraX(xcam + (obj.x - xcam) - (xbuf),viewdata);  

  if ((obj.y - ycam) > (gbox._screenh - ybuf)) gbox.setCameraY( ycam + (obj.y - ycam)-(gbox._screenh - ybuf),viewdata);
  if ((obj.y - ycam) < (ybuf)) gbox.setCameraY(ycam + (obj.y - ycam) - (ybuf),viewdata);  

}